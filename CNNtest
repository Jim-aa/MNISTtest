import torch
import numpy as np
from torch import nn
import torch.nn.functional as F
from torch.utils.data import DataLoader
import torchvision
from torchvision import datasets,transforms
import matplotlib.pyplot as plt
import time
transformation=transforms.Compose([transforms.ToTensor()])
train_ds=datasets.MNIST('data/',train=True,transform=transformation,download=True)
test_ds=datasets.MNIST('data/',train=False,transform=transformation,download=True)

train_loader=DataLoader(train_ds,batch_size=64,shuffle=True)
test_loader=DataLoader(test_ds,batch_size=128)
# imgs,label=next(iter(train_loader))
#
# print(imgs.shape)
device=torch.device('cuda:0'if torch.cuda.is_available() else 'cpu')
class MODEL(nn.Module):
    def __init__(self):
        super(MODEL, self).__init__()
        self.conv1=nn.Conv2d(in_channels=1,out_channels=6,kernel_size=5)
        self.pool=nn.MaxPool2d(kernel_size=2)
        self.conv2=nn.Conv2d(in_channels=6,out_channels=8,kernel_size=5)
        self.liner_1=nn.Linear(128,16)
        self.liner_2=nn.Linear(16,10)

    def forward(self,input):
        x=F.relu(self.conv1(input))
        x=self.pool(x)
        x=F.relu(self.conv2(x))
        x=self.pool(x)
        # print(x.shape)
        x=x.view(x.size(0),-1)
        x=F.relu(self.liner_1(x))
        x=self.liner_2(x)

        return x

def get_model():
    lr=0.001
    model=MODEL().to(device)
    loss_fn=nn.CrossEntropyLoss()
    opt=torch.optim.Adam(model.parameters(),lr=lr)

    return model,loss_fn,opt


def fit(epoch,model,loss_fn,opt,train_dl,test_dl):
    print('数据量:%d'%(len(train_dl.dataset)+len(test_dl.dataset)))
    train_loss=0
    train_acc=0
    train_total=0
    for x,y in train_dl:
        x,y=x.to(device),y.to(device)
        y_pred=model(x)
        loss=loss_fn(y_pred,y)
        opt.zero_grad()
        loss.backward()
        opt.step()

        with torch.no_grad():
            y_pred=torch.argmax(y_pred,dim=1)
            train_acc+=(y_pred.cpu().numpy()==y.cpu().numpy()).sum().item()
            train_total+=y.size(0)
            train_loss+=loss.data.item()
    epoch_train_loss= train_loss / len(train_dl.dataset)
    epoch_train_acc=train_acc / train_total

    test_loss=0
    test_acc=0
    test_total=0
    with torch.no_grad():
        for x,y in test_dl:
            x,y=x.to(device),y.to(device)
            y_pred=model(x)
            loss=loss_fn(y_pred,y)
            y_pred=torch.argmax(y_pred,dim=1)
            test_acc+=(y_pred.cpu().numpy()==y.cpu().numpy()).sum().item()
            test_total+=y.size(0)
            test_loss+=loss.data.item()
    epoch_test_loss= test_loss / len(test_dl.dataset)
    epoch_test_acc=test_acc / test_total
    print('epoch:%d,loss:%.3f,acc:%.3f,test_loss:%.3f,test_acc:%.3f' % (
        epoch + 1, epoch_train_loss, epoch_train_acc, epoch_test_loss, epoch_test_acc
    ))


    return epoch_train_acc, epoch_train_loss, epoch_test_acc, epoch_test_loss



def run():
    start=time.time()
    train_acc=[]
    train_loss=[]
    test_acc=[]
    test_loss=[]
    epochs=10
    model, loss_fn, opt=get_model()
    model.to(device)
    for epoch in range(epochs):
        epoch_train_acc, epoch_train_loss, epoch_test_acc, epoch_test_loss=fit(epoch,model,loss_fn,opt,train_loader,
                                                                               test_loader)
        train_acc.append(epoch_train_acc)
        train_loss.append(epoch_train_loss)
        test_acc.append(epoch_test_acc)
        test_loss.append(epoch_test_loss)

    end=time.time()
    print('时间：%5f'%(end-start))

    return train_acc,train_loss,test_acc,test_loss,epochs


def show(train_acc,train_loss,test_acc,test_loss,epochs):
    # plt.plot(range(1,epochs+1),train_acc,label='train_acc')
    # plt.plot(range(1,epochs+1),test_acc,label='test_acc')
    plt.plot(range(1, epochs + 1), train_loss, label='train_loss')
    plt.plot(range(1,epochs+1),test_loss,label='test_loss')
    # plt.legend(loc='lower right')
    plt.legend()
    plt.show()



if __name__=='__main__':
    train_acc,train_loss,test_acc,test_loss,epochs=run()
    show(train_acc,train_loss,test_acc,test_loss,epochs)


# model=MODEL()
# model(imgs)
